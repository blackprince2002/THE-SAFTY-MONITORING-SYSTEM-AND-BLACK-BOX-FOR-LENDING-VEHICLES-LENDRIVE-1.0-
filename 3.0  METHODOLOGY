In this section, Let’s look about a complete overview of the methodology followed in the development and implementation of the "Safety monitoring system and black box for lending vehicles." This includes the hardware setup, software development, integration of components, and thorough testing procedures.
3.1. System Architecture and Component Selection
A comprehensive solution called "Safety Monitoring System and Black Box for Lending Vehicles" has been developed to enhance security measures and provide state-of-the-art real-time monitoring capability. This solution uses a carefully selected set of hardware components that work together to achieve its intended functions. The following sections describe the complex design, including the major hardware components, their interconnections, and their individual contributions to achieving the system's overarching goals.
3.1.1 Architecture overview
The architecture of the system is dissected into several pivotal components, each wielding a pivotal role in bolstering the system's efficiency and potential. These components include:
Microcontroller (Arduino): Positioned at the heart of the system, the microcontroller acts as its cerebral cortex. Responsible for processing inputs from various sensors, controlling actuators, monitoring touch screen interface and managing external device communication, it organizes multiple operations of the system.
Sensors:
Alcohol Sensor: This sensor discerns the presence of alcohol in its vicinity, a crucial capability for detecting unauthorized alcohol consumption in restricted areas.
Flame Sensor: Tasked with detecting fire or elevated temperatures, the flame sensor empowers the system to swiftly identify and mitigate potential fire hazards.
Temperature Sensor: By gauging ambient temperature, this sensor contributes to environmental monitoring, facilitating safety assessments and interventions.
Rain Sensor: Distinguished by its ability to detect water droplets, the rain sensor plays a pivotal role in automated wiper control, enhancing visibility during inclement weather.
Touch Sensor: This is used to on/off the system
Buzzer and LED: These are used to detect the on/off situation
OLED Display: The OLED display emerges as the system's primary portal for user interaction. Presenting real-time sensor data, alerts, and system statuses. Users can know the sensor data through the display.
Communication Modules:
GSM Module: The GSM module is tasked with dispatching SMS alerts to designated phone numbers in response to security breaches or anomalous activities.
Fingerprint Sensor: Acting as a biometric guard, this module introduces an additional layer of security by authenticating users through fingerprint recognition, ensuring authorized access to system functionality.
Motor Module and Motors:
Motor: Act as an engine of the vehicle.
Wiper Motor: Act as a Wiper of the vehicle.
3.1.2 Component integration and roles
These components converge harmoniously into the ecosystem, integrating into an integrated system that intelligently monitors the environment, provides user interaction and delivers timely alerts. The following summarizes the interrelationships and key roles of the primary components:
Sensors: Linked to the microcontroller via analog pins, the sensors consistently gauge environmental variables, translating them into analog signals relayed to the microcontroller.
Microcontroller: The main interface, the microcontroller, interprets the analog signals from the sensors, converting them into understandable data. Using a predetermined threshold, the microcontroller detects alcohol, fire, rain or temperature deviations.
OLED Display: Seamlessly linked to the microcontroller, the display operates as the principal interface for users. It dynamically showcases real-time sensor readings and system status..
Communication Modules:
GSM Module: Effecting seamless communication, the GSM module coordinates with the microcontroller, transmitting SMS alerts to predetermined phone numbers.
Fingerprint Sensor: The fingerprint sensor interfaces with the microcontroller, authenticating users through their distinct fingerprints.
The interplay between these components ensures that the system effectively monitors environmental conditions, provides user-friendly interaction through the touch screen display, and communicates timely alerts to authorized personnel.
3.1.3 Integration of environmental sensors
Alcohol sensor:
This alcohol sensor detects the concentration of alcohol in the air and obtains the concentration of alcohol in the amount and the alcohol content in his breath air. The sensor detects that he is drunk. This MQ3 Alcohol sensor is the alcohol sensor in the air in the concentration range of 25 - 500 ppm. Ability to identify.
Structure:
This alcohol sensor has a two-layer stainless steel baffle that prevents other materials in the air from entering the sensor, except the gaseous atmosphere, and combustion feed gases from igniting the sensor. The sensing element is connected to 6 pins which include the sensor. Two legs are connected to the sensing elements by nickel-chromium wires with very good thermal conductivity, and the remaining 4 by platinum wires. The tube sensing element is made of aluminum oxide (AL2O3) based ceramics with a tin dioxide coating (SnO2).



How it works:
When the SnO2 layer is heated to a high temperature, oxygen particles are attracted to it, and when the vapor is purified, the electrons in the SnO2 particles are attracted to the oxygen molecules. Due to this, due to the lack of electrons in the SnO2 layer, a high potential barrier is created, preventing the current from flowing. With the arrival of alcohol particles, they become oxygen particles. By reacting with the oxygen leaving the SnO2 layer, electrons are returned to the SnO2 layer and allow current to flow freely. In this way, when the alcohol concentration increases, the analog output voltage increases. This analog signal is digitized, and the Status LED lights up when the alcohol concentration exceeds the specified value.

Rain Sensor:
This rain sensor mainly consists of two parts, namely the sensor module and the sensing pad. When water drops fall on the sensing pad, the sensor module processes the data and provides both digital and analog output.
Normally, when dry, the sensitive pad has high resistance and low conductivity. When water drops fall on the sensitive pad, the conductivity increases, and it can pass more power supply through one track to another track.
Main components
Variable Resistor: This allows setting the sensitivity of the rain sensor.
Power LED: This LED lights up to show when we turn on the system with the sensor.
Output LED: This RED LED will turn on when water drops are detected on the rain sensor.
LM 393 Comparator: In case of rain, the conductivity in the sensing pad increases and a high voltage is generated across the sensor pad. LM393 IC compares this voltage with the threshold voltage. Since this input voltage is higher than the threshold voltage, the output of the sensor module increases.
Flame Sensor:
This sensor is made with a diode capable of detecting rays belonging to the light spectrum range of the size of a flame of IR light. This flame sensor is sensitive to the wavelength range of 760nm - 1100nm in the infrared spectrum. This flame sensor module mainly consists of an IR sensor, a potentiometer and an interface that provides analog and digital outputs.
The infrared wavelength emitted by the flame is detected by the IR sensor and the potentiometer compares this with the threshold wavelength which can be considered as a flame and determines whether it is a flame or not. As the intensity of the detected infrared rays increases, the analog voltage output by the module also increases. This analog output is converted into a digital output and provides a signal.
Temperature sensor:
The DHT11 is a low-cost digital temperature sensor commonly used for measuring environmental parameters in various electronic projects. It provides digital output, making it easy to interface with microcontrollers and digital circuits, using a single-wire communication protocol. The DHT11 is capable of measuring temperatures in the range of 0°C to 50°C with an accuracy of ±2°C. It is a popular choice due to its affordability and simplicity, with readily available libraries for various microcontroller platforms like Arduino and Raspberry Pi. The sensor is compact, typically featuring three pins for power, data, and ground connections. However, it has limitations in terms of accuracy and update rate, so it is more suitable for applications where rough measurements of temperature and humidity are sufficient, such as in DIY weather stations and environmental monitoring projects. For higher accuracy requirements, more advanced sensors like the DHT22 or DHT21 are recommended, though they come at a higher cost.
3.2. Hardware Assembly and Connections
In this section, we provide step-by-step instructions for assembling the hardware components of this system. The hardware assembly involves connecting various sensors, modules, and components to ensure proper functionality. Detailed images, diagrams, and schematics are included to assist in the process.
3.2.1 Hardware setup
Step 1: Gather the Required Components
Collect all the hardware components needed for the project, including the microcontroller (Arduino), sensors (alcohol, flame, temperature, rain), OLED display, GSM module, fingerprint sensor, motor module, motors  and necessary cables.
Step 2: Prepare the Arduino and OLED Display
Mount the Arduino on a suitable platform or casing. Place the OLED display in a visible position on the casing. Ensure that the display's pins are accessible for wiring.
Step 3: Connect the OLED Display
Use jumper wires to connect the OLED display to the Arduino according to the pin configuration.

 
Figure 3: Connecting the OLED display
Step 4: Wire the Sensors
Connect the sensors to the Arduino using jumper wires. Pay attention to the sensor pinout and the appropriate analog or digital pins on the Arduino for each sensor.
 
Figure 4: Wiring the sensors

Step 5: Integrate the GSM Module
Wire the GSM module to the Arduino using jumper wires. Connect the module's TX to Arduino's RX and RX to Arduino's TX pins. Ensure proper power and ground connections.
 
Figure 5: Integrating the GSM module


Step 6: Integrate the Fingerprint Sensor
Connect the fingerprint sensor to the Arduino using jumper wires. Ensure correct wiring of RX and TX pins between the fingerprint sensor and Arduino.

 
Figure 6: Integrating the fingerprint sensor

3.2.2 Power management
Step 7: Provide Power Supply
Connect an external power supply to the Arduino, ensuring that the voltage matches the microcontroller's requirements. Connect power and ground to each sensor, the OLED display, GSM module, and fingerprint sensor.
Step 8: Voltage Regulation (Optional)
If necessary, include voltage regulators or stabilizers to ensure consistent and appropriate voltage levels for all components.
 
Figure 7: Regulating the voltage

3.3. Software Implementation
3.3.1 Arduino programming environment
Arduino IDE is a very important tool for programming the microcontroller. It provides a user-friendly platform for writing, compiling and uploading code to the Arduino board. The importance of the Arduino IDE that its simplicity and compatibility with a wide range of hardware components.
In Arduino programming, the code structure follows a setup and loop paradigm. The setup () function initializes the hardware components and is executed once when the microcontroller starts up. The loop () function is where the main code execution takes place and it runs in a continuous loop until the microcontroller shuts down.
Example:
 
Figure 8: Setup and loop paradigm

3.3.2 Sensor interfacing
Interfacing with sensors involves reading data from them and using that data for decision-making. For example, reading analog sensors (such as alcohol, flame, temperature) involves using the analogRead() function. Calibrating sensors might involve mapping sensor values to meaningful units (e.g., temperature values in degrees Celsius).
Example (Alcohol Sensor):
 
Figure 9: Reading analog sensors


3.4. Fingerprint Authentication Integration
Adding a fingerprint sensor to this system requires a few steps to ensure seamless communication and data retrieval. The fingerprint sensor used in this project is integrated with a microcontroller through software serial communication. The Adafruit fingerprint library is used to simplify the integration process.
3.4.1 Library installation
To begin, the Adafruit Fingerprint library is installed in the Arduino IDE. This library provides pre-built functions for communicating with the fingerprint sensor and handling fingerprint data. The following steps were followed:
1.	Open the Arduino IDE.
2.	Navigate to Sketch > Include Library > Manage Libraries.
3.	Search for "Adafruit Fingerprint" and install the library.
3.4.2 Sensor initialization
Once the library is installed, the fingerprint sensor is initialized in the setup section of the Arduino code. This involves setting up the Software Serial communication pins and starting the fingerprint sensor:
 
Figure 10: Fingerprint sensor initialization
3.4.3 Fingerprint image capture
The fingerprint image capture process involves multiple steps to ensure accurate data acquisition:
Capture Image: The getImage function is used to capture a fingerprint image from the sensor:
 
Figure 11: Fingerprint image capture
Convert to Template: The captured image is converted to a fingerprint template using the image2Tz function:
 
Figure 12: Converting to fingerprint template
3.4.4 Authentication logic
The authentication logic determines whether a captured fingerprint matches an authorized user's fingerprint template. This is accomplished using the fingerFastSearch function provided by the Adafruit Fingerprint library.
Capture Fingerprint: The user is pop-up to place their finger on the sensor for authentication. The system captures the fingerprint and converts it into a template.
Search for Match: The fingerFastSearch function is used to search for a matching fingerprint template in the stored templates. If a match is found, the function returns the ID of the matched template.
Authentication Outcome: If a match is found and the user is authenticated, the system proceeds with the desired action, such as powering off the system. If no match is found, access is denied.
3.4.5 Fingerprint data storage
Fingerprint templates of authorized users are stored in the fingerprint sensor's memory. These templates are captured during the enrolment process and associated with unique IDs. During authentication, the captured fingerprint template is compared with the stored templates to determine if there is a match.
3.4.6 Enrolment process
Before using the fingerprint authentication feature, users must enrol their fingerprints. During enrolment:
1.	The user places their finger on the sensor multiple times to capture multiple images.
2.	The captured images are converted to templates using the image2Tz function.
3.	The templates are stored in the fingerprint sensor's memory along with unique user IDs.
This stage explains the system's integration of the fingerprint sensor and the operation of the authentication mechanism. The Adafruit fingerprinting library greatly simplifies the process by providing ready-made functions for communication and template manipulation. This ensures efficient and accurate fingerprint-based authentication for this project.
3.5. GSM Module Configuration
In order to establish communication between the security system and authorized users, the GSM module is crucial. The system may use SMS to send pre-specified people immediate alerts and notifications. In this section, we'll go over setting up the GSM module for communication and sending SMS texts with AT commands.
3.5.1 Configuration of GSM module
The GSM module requires initialization and configuration to establish communication with cellular networks. This involves setting up parameters such as the SIM card, network registration, and preferred communication mode. The following steps detail the configuration process:
SIM Card Insertion: The SIM card is inserted into the GSM module's SIM slot. This card provides the module with network access credentials and identification.
Serial Communication Setup: Serial communication is established between the microcontroller and the GSM module. This is typically done using the SoftwareSerial library. The communication parameters (baud rate, data bits, etc.) must be correctly configured.
AT Commands: AT commands are sent from the microcontroller to the GSM module to configure its settings. For example:
AT: Basic command to check if the module responds.
AT+CPIN: Command to provide the SIM card's Personal Identification Number (PIN).
AT+COPS: Command to manually select a network operator.
AT+CMGF: Command to set the SMS message format (text mode or PDU mode).
AT+CMGS: Command to send an SMS message.
3.5.2 Real-time alerts
The real-time alert feature enhances the system's security by promptly notifying users of critical events. Alerts are generated based on predefined conditions, such as the detection of alcohol, flames, or other hazardous situations. When such conditions are met, the system takes the following steps to send an SMS alert:
Alert Detection: The system continuously monitors sensor data. When a hazardous event occurs (e.g., high alcohol level or flame detection), the microcontroller recognizes the event through programmed thresholds.
Alert Triggering: Upon detecting an event, the microcontroller triggers the alert process. It prepares the alert message and specifies the recipient's phone number.
AT Command Sequence: The microcontroller sends a series of AT commands to the GSM module to send the SMS alert:
AT+CMGF=1: Set the SMS format to text mode.
AT+CMGS="recipient_number": Initiate SMS sending to the specified number.
Message Content: The actual content of the alert message is sent to the module.
ASCII Ctrl+Z: Indicate the end of the message and prompt the module to send the SMS.
Alert Delivery: The GSM module communicates with the cellular network to deliver the SMS alert to the recipient's phone number.

3.6. Motor Module Configuration
We use L298N motor module to control the speed of engine motor and wiper motor, when sensors detecting dangerous situations. If such situations are detected, The motor module reduce the engine’s maximum speed by less than half of the initial speed. If it rains, wiper motor will automatically turned on.
3.6.1 Connection of motor module
•	Connect the input pins of the L298N module to your Arduino. The connections will typically include two control pins (e.g., IN1 and IN2 for one motor, and IN3 and IN4 for the other), an enable pin (e.g., ENA for one motor, ENB for the other), and the motor power supply.
•	Connect the output pins of the L298N module to the DC motors or stepper motors you want to control.
•	Connect the grounds of the Arduino and the L298N module together.

3.6.2 Basic operation
•	To control a DC motor, you set the appropriate input pins (IN1 and IN2 for motor A) to determine the direction (e.g., forward or reverse) and apply a PWM (Pulse Width Modulation) signal to the ENA pin to control the speed. The higher the PWM value, the faster the motor turns.
•	To control a stepper motor, you can use the L298N module in a similar way by pulsing the input pins in sequence to make the stepper motor step. Stepper motor control requires a more complex sequence of input signals to achieve precise positioning.

3.7. GPS Module Configuration
GPS module is used to send the location as an message when an unsafe behaviour is detected through the sensors. This will help to find the location of the vehicle in a dangerous situation and we can act fast to rescue the vehicle from an accident. We used NEO-8M GPS module in our project.

3.7.1 NEO-8M GPS Module
•	The NEO-8M is a GPS module produced by u-blox that can communicate with GPS, GLONASS, Galileo, BeiDou, and other satellite systems.
•	It communicates with the Arduino using serial communication (UART).
•	It typically requires an external GPS antenna to receive satellite signals effectively.
•	The NEO-8M module provides information such as latitude, longitude, altitude, speed, and more in NMEA sentences.

3.7.2 Connection of GPS module
•	Connect the NEO-8M module to the Arduino using UART communication. You'll typically connect the GPS module's TX pin to the Arduino's RX pin and vice versa.
•	Power the NEO-8M module using a suitable voltage (usually 3.3V or 5V) and connect the ground (GND) pin as well.

3.8. Enhancements and Future Considerations
While the system's alert mechanism is functional, several enhancements and future considerations can be explored:
Multi-Recipient Support: Modify the system to send alerts to multiple recipients, ensuring that relevant parties are informed.
Event Logging: Implement a system for recording detected events and sent alerts. This can provide a historical record for analysis.
Network Strength Detection: Enhance the alert system by including AT commands to check network signal strength and adjust communication accordingly.
By configuring the GSM module and implementing real-time alerts, the security system ensures that users are promptly informed about critical events, contributing to a safer environment.




